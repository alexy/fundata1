Our original implementation was in Clojure.  Computation was surprisingly fast, but loading/unloading data was very slow.  We tried many Java serialization solutions, including Berkeley DB Java Edition and Java serialize, but it was too slow.  

We ended up using a Clojure wrapper for [Google Protocol Buffers](http://code.google.com/apis/protocolbuffers/), [clojure-protobuf](github.com/ninjudd/clojure-protobuf) for storing adjacency lists, and [Tokyo Cabinet](http://www.1978th.net/tokyocabinet/) wrapper for storing the protobuf as a value under each @user key. Our adjacency lists have an added layer of days.  We call the input graph _daily repliers_, or _dreps_.   We use [jiraph](http://github.com/ninjudd/jiraph/) to access Tokyo Cabinet from Clojure, and [cake](http://github.com/ninjudd/cake/) to build projects with protobuffers easily -- all great work of `@ninjudd` and `@lancepantz`.

Then _dreps_ loading time drops to about 2 minutes, which is great.  However, writing Tokyo Cabinets may be surprisingly slow on journaling file systems such as `ext3`.  Currently it takes more than half an hour to dump the resulting social capital graph from Clojure, which we report as _N/A_ as it's not usable.